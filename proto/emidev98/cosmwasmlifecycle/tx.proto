syntax = "proto3";
package emidev98.cosmwasmlifecycle;

import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "emidev98/cosmwasmlifecycle/execution_type.proto";
import "emidev98/cosmwasmlifecycle/params.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/emidev98/cosmwasm-lifecycle/x/cosmwasmlifecycle/types";

// Msg defines the Msg service.
service Msg {
  // Allow anyone to deposit funds for a smart contract to be executed
  // at begin and end block. This is useful when the parameters are updated.
  // and a contract will not have enough funds to execute.
  rpc FundExistentContract(MsgFundExistentContract) returns (MsgFundExistentContractResponse);

  // Update module parameters allowed only thought governance.
  rpc UpdateParams(MsgUpdateParamsProposal) returns (MsgUpdateParamsProposalResponse);

  // Register a contract execution for begin or end block
  // allowed only thoguht governance.
  rpc RegisterContract(MsgRegisterContractProposal) returns (MsgRegisterContractProposalResponse);

  // Modify an already registered contract execution at begin or end block
  rpc ModifyContract(MsgModifyContractProposal) returns (MsgModifyContractProposalResponse);

  // Remove registered contract execution thoguht governance
  // and send the collateral back to the specified address.
  rpc RemoveContract(MsgRemoveContractProposal) returns (MsgRemoveContractProposalResponse);
}

// Anyone can send funds for an already registered contract 
// to continue with its execution at begin or end block.
// This funds will be in custody of the cosmwsmlifecycle module
// and will be returned to the address specified in the 
// MsgRemoveContractProposal when the contract is disabled 
// by governance.If the contract reaches the maximum number 
// of strikes all funds related to the contract will be burned.
message MsgFundExistentContract {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_getters) = true;
  option (cosmos.msg.v1.signer) = "sender";
  // Sender&signer of the funds.
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // Address of the contract to fund.
  string contract_addr = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // Collateral deposited to the contract.
  cosmos.base.v1beta1.Coin deposit = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin"
  ];
}
message MsgFundExistentContractResponse {}

// Authority message to update the module parameters allowed only thought governance.
message MsgUpdateParamsProposal {
  option (cosmos.msg.v1.signer) = "authority";
  // the title of the update proposal
  string title = 1;
  // the description of the proposal
  string description = 2;
  // gov account address
  string authority = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // cosmwasm-lifecycle module params
  Params params = 4 [(gogoproto.nullable) = false];
}
message MsgUpdateParamsProposalResponse {}

// Authority message to register a contract for 
// execution at begin or end block. If the specified 
// contract is already registered this message will fail.
message MsgRegisterContractProposal {
  option (cosmos.msg.v1.signer) = "authority";
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_getters) = true;
  // the title of the update proposal
  string title = 1;
  // the description of the proposal
  string description = 2;
  // gov account  address
  string authority = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // collateral deposited to enable contract execution
  cosmos.base.v1beta1.Coin contract_deposit = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin"
  ];
  // address of the contract to enable its methods execution
  string contract_addr = 5 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // execution type to enable on begin, end block or both
  ExecutionType execution_type = 6;
  // execution each block or every n blocks
  int64 execution_blocks_frequency = 7;
}
message MsgRegisterContractProposalResponse {}

// Authority message, to modify an already registered contract execution.
// Operation can be ENABLE or DISABLE the execution type specified in the execution field.
// If the specified contract is not existent this message will fail.
message MsgModifyContractProposal {
  option (cosmos.msg.v1.signer) = "authority";
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_getters) = true;
  // the title of the update proposal
  string title = 1;
  // the description of the proposal
  string description = 2;
  // gov account  address
  string authority = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // address of the contract to modify its execution params
  string contract_addr = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // execution type begin block, end block or both
  ExecutionType execution_type = 5;
  // ENABLE or DISABLE the execution type specified in the execution field
  ExecutionTypeOperation operation = 6; 
  // execution each block or every n blocks
  int64 execution_blocks_frequency = 7;
}
message MsgModifyContractProposalResponse {}


// Authority message to remove a contract execution,
// This message will send the collateral back to the specified address
message MsgRemoveContractProposal {
  option (cosmos.msg.v1.signer) = "authority";
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_getters) = true;

  // the title of the update proposal
  string title = 1;
  // the description of the proposal
  string description = 2;
  // gov account address
  string authority = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // account address of the contract to enable its methods execution
  string contract_addr = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // account address to send the collateral back
  string deposit_refund_account = 5 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}
message MsgRemoveContractProposalResponse {}
