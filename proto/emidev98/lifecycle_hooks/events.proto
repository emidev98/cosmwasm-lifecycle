syntax = "proto3";
package emidev98.lifecycle_hooks;

import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "emidev98/lifecycle_hooks/execution_type.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/emidev98/lifecycle-hooks/x/lifecycle-hooks/types";

// This event is executed when a contract is registered using MsgRegisterContractProposal
message RegisterContractEvent {
    string module_name = 1;
    string contract_address = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
    cosmos.base.v1beta1.Coin contract_deposit = 3 [
        (gogoproto.nullable) = false,
        (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin"
    ];
    ExecutionType execution_type = 4;
    int64 block_frequency = 5;
}

// This event is executed when a contract is modified using MsgModifyContractProposal
message ModifyContractEvent {
    string module_name = 1;
    string contract_address = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
    ExecutionType new_execution_type = 3;
    int64 new_block_frequency = 4;
}

// This event is executed when a contract is removed using MsgRemoveContractProposal
message RemoveContractEvent {
    string module_name = 1;
    string contract_address = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
    string refund_account = 3 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
    cosmos.base.v1beta1.Coin refund_amount = 4  [
        (gogoproto.nullable) = false,
        (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin"
    ];
}

// This event is executed when a contract is funded using MsgFundExistentContract
message FundExistentContractEvent {
    string module_name = 1;
    string contract_address = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
    string sender_address = 3 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
    cosmos.base.v1beta1.Coin deposit_amount = 4  [
        (gogoproto.nullable) = false,
        (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin"
    ];
}

// This event is executed each time a contract returns an error and it's striked
message ContractStrikeEvent {
    string module_name = 1;
    string contract_address = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
    int64 current_strike = 3;
    string strike_reason = 4;
}

// This event is executed when a contract reaches the maximum number of strikes
// the contract is removed and the funds are burn
message ForceRemoveContractEvent {
    string module_name = 1;
    string contract_address = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}
