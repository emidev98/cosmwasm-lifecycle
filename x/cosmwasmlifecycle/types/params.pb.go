// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmwasmlifecycle/params.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the module.
type Params struct {
	// Enable or disable executions
	// at the begin and end of the block
	IsEnabled bool `protobuf:"varint,1,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	// Minimum deposit to enable contract execution at begin block and/or end block
	// This deposit will be burned if the contract execution reaches the max strikes.
	MinDeposit github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,2,opt,name=min_deposit,json=minDeposit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"min_deposit"`
	// Amount of strikes that the contract can hold before being
	// disabled from end and beging block executions.
	//  When this happens the min_desposit will also be burned.
	StrikesToDisableExecution int64 `protobuf:"varint,3,opt,name=strikes_to_disable_execution,json=strikesToDisableExecution,proto3" json:"strikes_to_disable_execution,omitempty"`
	// Contract Addresses that will execute "{"begin_block": {}}"
	// as sudo at the begining of each block
	BeginBlockExecution []string `protobuf:"bytes,4,rep,name=begin_block_execution,json=beginBlockExecution,proto3" json:"begin_block_execution,omitempty"`
	// Contract Addresses that will execute "{"end_block": {}}"
	// as sudo at the end of each block
	EndBlockExecution []string `protobuf:"bytes,5,rep,name=end_block_execution,json=endBlockExecution,proto3" json:"end_block_execution,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_d96aa1bf4f8b3eba, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *Params) GetStrikesToDisableExecution() int64 {
	if m != nil {
		return m.StrikesToDisableExecution
	}
	return 0
}

func (m *Params) GetBeginBlockExecution() []string {
	if m != nil {
		return m.BeginBlockExecution
	}
	return nil
}

func (m *Params) GetEndBlockExecution() []string {
	if m != nil {
		return m.EndBlockExecution
	}
	return nil
}

func init() {
	proto.RegisterType((*Params)(nil), "cosmwasmlifecycle.Params")
}

func init() { proto.RegisterFile("cosmwasmlifecycle/params.proto", fileDescriptor_d96aa1bf4f8b3eba) }

var fileDescriptor_d96aa1bf4f8b3eba = []byte{
	// 400 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xb1, 0x8e, 0xd3, 0x40,
	0x10, 0x86, 0xed, 0xcb, 0x71, 0xe2, 0xf6, 0xaa, 0x73, 0x82, 0xe4, 0x44, 0xb0, 0xb1, 0x68, 0x70,
	0x13, 0xaf, 0x02, 0x0d, 0xd0, 0x00, 0x26, 0x91, 0x28, 0x28, 0x90, 0xa1, 0x4a, 0x63, 0xd9, 0xde,
	0xc1, 0xac, 0x6c, 0xef, 0x5a, 0xde, 0x4d, 0x48, 0xde, 0x82, 0x92, 0x92, 0x87, 0xe0, 0x21, 0x52,
	0x46, 0x54, 0x88, 0x22, 0x42, 0xc9, 0x23, 0xf0, 0x02, 0xc8, 0x5e, 0x47, 0x09, 0x4a, 0x41, 0x65,
	0x8f, 0xff, 0xff, 0xff, 0x66, 0x34, 0x1e, 0x84, 0x13, 0x21, 0x8b, 0xcf, 0x91, 0x2c, 0x72, 0xf6,
	0x11, 0x92, 0x55, 0x92, 0x03, 0x29, 0xa3, 0x2a, 0x2a, 0xa4, 0x57, 0x56, 0x42, 0x09, 0xeb, 0xf6,
	0x4c, 0x1f, 0xf4, 0x52, 0x91, 0x8a, 0x46, 0x25, 0xf5, 0x9b, 0x36, 0x0e, 0xfa, 0xb5, 0x51, 0xc8,
	0x50, 0x0b, 0xba, 0x68, 0x25, 0xac, 0x2b, 0x12, 0x47, 0x12, 0xc8, 0x62, 0x1c, 0x83, 0x8a, 0xc6,
	0x24, 0x11, 0x8c, 0x6b, 0xfd, 0xe1, 0x9f, 0x0b, 0x74, 0xf5, 0xae, 0x69, 0x6a, 0x3d, 0x40, 0x88,
	0xc9, 0x10, 0x78, 0x14, 0xe7, 0x40, 0x6d, 0xd3, 0x31, 0xdd, 0xbb, 0xc1, 0x35, 0x93, 0x53, 0xfd,
	0xc1, 0xca, 0xd0, 0x4d, 0xc1, 0x78, 0x48, 0xa1, 0x14, 0x92, 0x29, 0xfb, 0xc2, 0x31, 0xdd, 0x9b,
	0xc7, 0x7d, 0xaf, 0xed, 0x56, 0xf3, 0xbd, 0x96, 0xef, 0xbd, 0x16, 0x8c, 0xfb, 0x64, 0xbd, 0x1d,
	0x1a, 0xbf, 0xb6, 0xc3, 0x47, 0x29, 0x53, 0x9f, 0xe6, 0xb1, 0x97, 0x88, 0xa2, 0x1d, 0xad, 0x7d,
	0x8c, 0x24, 0xcd, 0x88, 0x5a, 0x95, 0x20, 0x9b, 0x40, 0x80, 0x0a, 0xc6, 0x27, 0x9a, 0x6e, 0xbd,
	0x40, 0xf7, 0xa5, 0xaa, 0x58, 0x06, 0x32, 0x54, 0x22, 0xa4, 0x4c, 0xd6, 0x33, 0x84, 0xb0, 0x84,
	0x64, 0xae, 0x98, 0xe0, 0x76, 0xc7, 0x31, 0xdd, 0x4e, 0xd0, 0x6f, 0x3d, 0x1f, 0xc4, 0x44, 0x3b,
	0xa6, 0x07, 0x83, 0xf5, 0x16, 0xdd, 0x8b, 0x21, 0x65, 0x3c, 0x8c, 0x73, 0x91, 0x64, 0x27, 0xc9,
	0x4b, 0xa7, 0xe3, 0x5e, 0xfb, 0xf6, 0x8f, 0xef, 0xa3, 0x5e, 0x3b, 0xfa, 0x2b, 0x4a, 0x2b, 0x90,
	0xf2, 0xbd, 0xaa, 0x18, 0x4f, 0x83, 0x6e, 0x13, 0xf3, 0xeb, 0xd4, 0x91, 0xf6, 0x06, 0x75, 0x81,
	0xd3, 0x33, 0xd6, 0x9d, 0xff, 0xb0, 0x6e, 0x81, 0xd3, 0x7f, 0x49, 0xcf, 0x2f, 0xbf, 0x7e, 0x1b,
	0x1a, 0xfe, 0x6c, 0xbd, 0xc3, 0xe6, 0x66, 0x87, 0xcd, 0xdf, 0x3b, 0x6c, 0x7e, 0xd9, 0x63, 0x63,
	0xb3, 0xc7, 0xc6, 0xcf, 0x3d, 0x36, 0x66, 0x2f, 0x4f, 0xb6, 0x05, 0x05, 0xa3, 0xb0, 0x78, 0xf6,
	0x94, 0x1c, 0xee, 0x60, 0x74, 0x3c, 0x94, 0x25, 0x39, 0x3f, 0x9e, 0x66, 0x97, 0xf1, 0x55, 0xf3,
	0x63, 0x9f, 0xfc, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xbe, 0x45, 0xd3, 0x5d, 0x5e, 0x02, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EndBlockExecution) > 0 {
		for iNdEx := len(m.EndBlockExecution) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EndBlockExecution[iNdEx])
			copy(dAtA[i:], m.EndBlockExecution[iNdEx])
			i = encodeVarintParams(dAtA, i, uint64(len(m.EndBlockExecution[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.BeginBlockExecution) > 0 {
		for iNdEx := len(m.BeginBlockExecution) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BeginBlockExecution[iNdEx])
			copy(dAtA[i:], m.BeginBlockExecution[iNdEx])
			i = encodeVarintParams(dAtA, i, uint64(len(m.BeginBlockExecution[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.StrikesToDisableExecution != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.StrikesToDisableExecution))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.MinDeposit.Size()
		i -= size
		if _, err := m.MinDeposit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsEnabled {
		n += 2
	}
	l = m.MinDeposit.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.StrikesToDisableExecution != 0 {
		n += 1 + sovParams(uint64(m.StrikesToDisableExecution))
	}
	if len(m.BeginBlockExecution) > 0 {
		for _, s := range m.BeginBlockExecution {
			l = len(s)
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if len(m.EndBlockExecution) > 0 {
		for _, s := range m.EndBlockExecution {
			l = len(s)
			n += 1 + l + sovParams(uint64(l))
		}
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDeposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinDeposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrikesToDisableExecution", wireType)
			}
			m.StrikesToDisableExecution = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StrikesToDisableExecution |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginBlockExecution", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeginBlockExecution = append(m.BeginBlockExecution, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlockExecution", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndBlockExecution = append(m.EndBlockExecution, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
