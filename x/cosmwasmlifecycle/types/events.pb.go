// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: emidev98/cosmwasmlifecycle/events.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// This event is executed when a contract is registered using MsgRegisterContractProposal
type RegisterContractEvent struct {
	ModuleName      string                                  `protobuf:"bytes,1,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
	ContractAddress string                                  `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	ContractDeposit github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,3,opt,name=contract_deposit,json=contractDeposit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"contract_deposit"`
	ExecutionType   ExecutionType                           `protobuf:"varint,4,opt,name=execution_type,json=executionType,proto3,enum=emidev98.cosmwasmlifecycle.ExecutionType" json:"execution_type,omitempty"`
	BlockFrequency  int64                                   `protobuf:"varint,5,opt,name=block_frequency,json=blockFrequency,proto3" json:"block_frequency,omitempty"`
}

func (m *RegisterContractEvent) Reset()         { *m = RegisterContractEvent{} }
func (m *RegisterContractEvent) String() string { return proto.CompactTextString(m) }
func (*RegisterContractEvent) ProtoMessage()    {}
func (*RegisterContractEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5f21cab13267c05, []int{0}
}
func (m *RegisterContractEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterContractEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterContractEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterContractEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterContractEvent.Merge(m, src)
}
func (m *RegisterContractEvent) XXX_Size() int {
	return m.Size()
}
func (m *RegisterContractEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterContractEvent.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterContractEvent proto.InternalMessageInfo

func (m *RegisterContractEvent) GetModuleName() string {
	if m != nil {
		return m.ModuleName
	}
	return ""
}

func (m *RegisterContractEvent) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *RegisterContractEvent) GetExecutionType() ExecutionType {
	if m != nil {
		return m.ExecutionType
	}
	return ExecutionType_BEGIN_BLOCK
}

func (m *RegisterContractEvent) GetBlockFrequency() int64 {
	if m != nil {
		return m.BlockFrequency
	}
	return 0
}

// This event is executed when a contract is modified using MsgModifyContractProposal
type ModifyContractEvent struct {
	ModuleName        string        `protobuf:"bytes,1,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
	ContractAddress   string        `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	NewExecutionType  ExecutionType `protobuf:"varint,3,opt,name=new_execution_type,json=newExecutionType,proto3,enum=emidev98.cosmwasmlifecycle.ExecutionType" json:"new_execution_type,omitempty"`
	NewBlockFrequency int64         `protobuf:"varint,4,opt,name=new_block_frequency,json=newBlockFrequency,proto3" json:"new_block_frequency,omitempty"`
}

func (m *ModifyContractEvent) Reset()         { *m = ModifyContractEvent{} }
func (m *ModifyContractEvent) String() string { return proto.CompactTextString(m) }
func (*ModifyContractEvent) ProtoMessage()    {}
func (*ModifyContractEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5f21cab13267c05, []int{1}
}
func (m *ModifyContractEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModifyContractEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModifyContractEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModifyContractEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModifyContractEvent.Merge(m, src)
}
func (m *ModifyContractEvent) XXX_Size() int {
	return m.Size()
}
func (m *ModifyContractEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ModifyContractEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ModifyContractEvent proto.InternalMessageInfo

func (m *ModifyContractEvent) GetModuleName() string {
	if m != nil {
		return m.ModuleName
	}
	return ""
}

func (m *ModifyContractEvent) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *ModifyContractEvent) GetNewExecutionType() ExecutionType {
	if m != nil {
		return m.NewExecutionType
	}
	return ExecutionType_BEGIN_BLOCK
}

func (m *ModifyContractEvent) GetNewBlockFrequency() int64 {
	if m != nil {
		return m.NewBlockFrequency
	}
	return 0
}

// This event is executed when a contract is removed using MsgRemoveContractProposal
type RemoveContractEvent struct {
	ModuleName      string                                  `protobuf:"bytes,1,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
	ContractAddress string                                  `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	RefundAccount   string                                  `protobuf:"bytes,3,opt,name=refund_account,json=refundAccount,proto3" json:"refund_account,omitempty"`
	RefundAmount    github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,4,opt,name=refund_amount,json=refundAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"refund_amount"`
}

func (m *RemoveContractEvent) Reset()         { *m = RemoveContractEvent{} }
func (m *RemoveContractEvent) String() string { return proto.CompactTextString(m) }
func (*RemoveContractEvent) ProtoMessage()    {}
func (*RemoveContractEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5f21cab13267c05, []int{2}
}
func (m *RemoveContractEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveContractEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveContractEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveContractEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveContractEvent.Merge(m, src)
}
func (m *RemoveContractEvent) XXX_Size() int {
	return m.Size()
}
func (m *RemoveContractEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveContractEvent.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveContractEvent proto.InternalMessageInfo

func (m *RemoveContractEvent) GetModuleName() string {
	if m != nil {
		return m.ModuleName
	}
	return ""
}

func (m *RemoveContractEvent) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *RemoveContractEvent) GetRefundAccount() string {
	if m != nil {
		return m.RefundAccount
	}
	return ""
}

// This event is executed when a contract is funded using MsgFundExistentContract
type FundExistentContractEvent struct {
	ModuleName      string                                  `protobuf:"bytes,1,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
	ContractAddress string                                  `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	SenderAddress   string                                  `protobuf:"bytes,3,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"`
	DepositAmount   github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,4,opt,name=deposit_amount,json=depositAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"deposit_amount"`
}

func (m *FundExistentContractEvent) Reset()         { *m = FundExistentContractEvent{} }
func (m *FundExistentContractEvent) String() string { return proto.CompactTextString(m) }
func (*FundExistentContractEvent) ProtoMessage()    {}
func (*FundExistentContractEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5f21cab13267c05, []int{3}
}
func (m *FundExistentContractEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FundExistentContractEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FundExistentContractEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FundExistentContractEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FundExistentContractEvent.Merge(m, src)
}
func (m *FundExistentContractEvent) XXX_Size() int {
	return m.Size()
}
func (m *FundExistentContractEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_FundExistentContractEvent.DiscardUnknown(m)
}

var xxx_messageInfo_FundExistentContractEvent proto.InternalMessageInfo

func (m *FundExistentContractEvent) GetModuleName() string {
	if m != nil {
		return m.ModuleName
	}
	return ""
}

func (m *FundExistentContractEvent) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *FundExistentContractEvent) GetSenderAddress() string {
	if m != nil {
		return m.SenderAddress
	}
	return ""
}

// This event is executed each time a contract returns an error and it's striked
type ContractStrikeEvent struct {
	ModuleName      string `protobuf:"bytes,1,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
	ContractAddress string `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	CurrentStrike   int64  `protobuf:"varint,3,opt,name=current_strike,json=currentStrike,proto3" json:"current_strike,omitempty"`
	StrikeReason    string `protobuf:"bytes,4,opt,name=strike_reason,json=strikeReason,proto3" json:"strike_reason,omitempty"`
}

func (m *ContractStrikeEvent) Reset()         { *m = ContractStrikeEvent{} }
func (m *ContractStrikeEvent) String() string { return proto.CompactTextString(m) }
func (*ContractStrikeEvent) ProtoMessage()    {}
func (*ContractStrikeEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5f21cab13267c05, []int{4}
}
func (m *ContractStrikeEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractStrikeEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractStrikeEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractStrikeEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractStrikeEvent.Merge(m, src)
}
func (m *ContractStrikeEvent) XXX_Size() int {
	return m.Size()
}
func (m *ContractStrikeEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractStrikeEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ContractStrikeEvent proto.InternalMessageInfo

func (m *ContractStrikeEvent) GetModuleName() string {
	if m != nil {
		return m.ModuleName
	}
	return ""
}

func (m *ContractStrikeEvent) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *ContractStrikeEvent) GetCurrentStrike() int64 {
	if m != nil {
		return m.CurrentStrike
	}
	return 0
}

func (m *ContractStrikeEvent) GetStrikeReason() string {
	if m != nil {
		return m.StrikeReason
	}
	return ""
}

// This event is executed when a contract reaches the maximum number of strikes
// the contract is removed and the funds are burn
type ForceRemoveContractEvent struct {
	ModuleName      string `protobuf:"bytes,1,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
	ContractAddress string `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (m *ForceRemoveContractEvent) Reset()         { *m = ForceRemoveContractEvent{} }
func (m *ForceRemoveContractEvent) String() string { return proto.CompactTextString(m) }
func (*ForceRemoveContractEvent) ProtoMessage()    {}
func (*ForceRemoveContractEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5f21cab13267c05, []int{5}
}
func (m *ForceRemoveContractEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForceRemoveContractEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForceRemoveContractEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForceRemoveContractEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForceRemoveContractEvent.Merge(m, src)
}
func (m *ForceRemoveContractEvent) XXX_Size() int {
	return m.Size()
}
func (m *ForceRemoveContractEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ForceRemoveContractEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ForceRemoveContractEvent proto.InternalMessageInfo

func (m *ForceRemoveContractEvent) GetModuleName() string {
	if m != nil {
		return m.ModuleName
	}
	return ""
}

func (m *ForceRemoveContractEvent) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*RegisterContractEvent)(nil), "emidev98.cosmwasmlifecycle.RegisterContractEvent")
	proto.RegisterType((*ModifyContractEvent)(nil), "emidev98.cosmwasmlifecycle.ModifyContractEvent")
	proto.RegisterType((*RemoveContractEvent)(nil), "emidev98.cosmwasmlifecycle.RemoveContractEvent")
	proto.RegisterType((*FundExistentContractEvent)(nil), "emidev98.cosmwasmlifecycle.FundExistentContractEvent")
	proto.RegisterType((*ContractStrikeEvent)(nil), "emidev98.cosmwasmlifecycle.ContractStrikeEvent")
	proto.RegisterType((*ForceRemoveContractEvent)(nil), "emidev98.cosmwasmlifecycle.ForceRemoveContractEvent")
}

func init() {
	proto.RegisterFile("emidev98/cosmwasmlifecycle/events.proto", fileDescriptor_b5f21cab13267c05)
}

var fileDescriptor_b5f21cab13267c05 = []byte{
	// 617 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x95, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xc7, 0xe3, 0xa4, 0xbf, 0x9f, 0xd4, 0x6d, 0xed, 0x16, 0xa7, 0x48, 0x6e, 0x0f, 0x6e, 0x14,
	0x84, 0x1a, 0x0e, 0xb5, 0xd5, 0x72, 0x81, 0x13, 0x34, 0xa5, 0xbd, 0x81, 0x90, 0x41, 0x42, 0xea,
	0xc5, 0x72, 0xd6, 0x93, 0x60, 0x35, 0xde, 0x4d, 0x77, 0xd7, 0xf9, 0x73, 0xe3, 0xc0, 0x03, 0xf0,
	0x22, 0xdc, 0xe0, 0x19, 0xe8, 0xb1, 0xe2, 0x84, 0x38, 0x54, 0x28, 0x79, 0x00, 0x5e, 0x01, 0x79,
	0x77, 0x4d, 0x93, 0x16, 0x8a, 0x90, 0x80, 0x9c, 0x92, 0xfd, 0xee, 0xcc, 0x77, 0x66, 0x3f, 0xeb,
	0xd5, 0xa0, 0x2d, 0x48, 0x93, 0x18, 0xfa, 0xf7, 0xef, 0xf9, 0x98, 0xf2, 0x74, 0x10, 0xf1, 0xb4,
	0x9b, 0xb4, 0x01, 0x8f, 0x70, 0x17, 0x7c, 0xe8, 0x03, 0x11, 0xdc, 0xeb, 0x31, 0x2a, 0xa8, 0xbd,
	0x51, 0x04, 0x7a, 0x57, 0x02, 0x37, 0xdc, 0x5c, 0xa2, 0xdc, 0x6f, 0x45, 0x1c, 0xfc, 0xfe, 0x4e,
	0x0b, 0x44, 0xb4, 0xe3, 0x63, 0x9a, 0x10, 0x95, 0xbb, 0xb1, 0xae, 0xf6, 0x43, 0xb9, 0xf2, 0xd5,
	0x42, 0x6f, 0xf9, 0xd7, 0xd5, 0x1f, 0x02, 0xce, 0x44, 0x42, 0x49, 0x28, 0x46, 0x3d, 0xd0, 0x09,
	0x6b, 0x1d, 0xda, 0xa1, 0xca, 0x28, 0xff, 0xa7, 0xd4, 0xfa, 0xd7, 0x32, 0xba, 0x19, 0x40, 0x27,
	0xe1, 0x02, 0xd8, 0x3e, 0x25, 0x82, 0x45, 0x58, 0x1c, 0xe4, 0xed, 0xdb, 0x9b, 0x68, 0x29, 0xa5,
	0x71, 0xd6, 0x85, 0x90, 0x44, 0x29, 0x38, 0x46, 0xcd, 0x68, 0x2c, 0x06, 0x48, 0x49, 0x4f, 0xa2,
	0x14, 0xec, 0x7d, 0xb4, 0x8a, 0x75, 0x46, 0x18, 0xc5, 0x31, 0x03, 0xce, 0x9d, 0x72, 0x1e, 0xd5,
	0x74, 0x3e, 0xbe, 0xdb, 0x5e, 0xd3, 0xdd, 0xee, 0xa9, 0x9d, 0x67, 0x82, 0x25, 0xa4, 0x13, 0xac,
	0x14, 0x19, 0x5a, 0xb6, 0xb3, 0x29, 0x93, 0x18, 0x7a, 0x94, 0x27, 0xc2, 0xa9, 0xd4, 0x8c, 0xc6,
	0xd2, 0xee, 0xba, 0xa7, 0x1d, 0x72, 0x38, 0x9e, 0x86, 0xe3, 0xed, 0xd3, 0x84, 0x34, 0xfd, 0xd3,
	0xf3, 0xcd, 0xd2, 0xe7, 0xf3, 0xcd, 0xad, 0x4e, 0x22, 0x5e, 0x66, 0x2d, 0x0f, 0xd3, 0x54, 0xc3,
	0xd1, 0x3f, 0xdb, 0x3c, 0x3e, 0xf6, 0xf3, 0xb3, 0x73, 0x99, 0x70, 0x51, 0xf6, 0x91, 0x2a, 0x61,
	0x3f, 0x45, 0xd6, 0x2c, 0x24, 0x67, 0xa1, 0x66, 0x34, 0xac, 0xdd, 0x3b, 0xde, 0xcf, 0x6f, 0xcb,
	0x3b, 0x28, 0x32, 0x9e, 0x8f, 0x7a, 0x10, 0x98, 0x30, 0xbd, 0xb4, 0xb7, 0xd0, 0x4a, 0xab, 0x4b,
	0xf1, 0x71, 0xd8, 0x66, 0x70, 0x92, 0x01, 0xc1, 0x23, 0xe7, 0xbf, 0x9a, 0xd1, 0xa8, 0x04, 0x96,
	0x94, 0x0f, 0x0b, 0xb5, 0xfe, 0xba, 0x8c, 0xaa, 0x8f, 0x69, 0x9c, 0xb4, 0x47, 0xf3, 0xe0, 0xfd,
	0x02, 0xd9, 0x04, 0x06, 0xe1, 0xa5, 0xc3, 0x57, 0x7e, 0xf7, 0xf0, 0xab, 0x04, 0x06, 0x33, 0x8a,
	0xed, 0xa1, 0x6a, 0x6e, 0x7c, 0x99, 0xc1, 0x82, 0x64, 0x70, 0x83, 0xc0, 0xa0, 0x39, 0x8b, 0xe1,
	0x6d, 0x19, 0x55, 0x03, 0x48, 0x69, 0x1f, 0xe6, 0x81, 0xe1, 0x01, 0xb2, 0x18, 0xb4, 0x33, 0x12,
	0x87, 0x11, 0xc6, 0x34, 0x23, 0xea, 0xa3, 0xbb, 0xce, 0xc2, 0x54, 0xf1, 0x7b, 0x2a, 0xdc, 0xa6,
	0xc8, 0x2c, 0x0c, 0x52, 0x99, 0xbf, 0xf0, 0xc7, 0x3f, 0xda, 0x65, 0x5d, 0x51, 0xfa, 0xd7, 0xdf,
	0x97, 0xd1, 0xfa, 0x61, 0x46, 0xe2, 0x83, 0x61, 0xfe, 0x56, 0x89, 0x98, 0x13, 0x35, 0x0e, 0x24,
	0x06, 0xf6, 0xdd, 0xe2, 0x97, 0xd4, 0x54, 0x7c, 0x61, 0x70, 0x82, 0x2c, 0xfd, 0xc8, 0xff, 0x1e,
	0x36, 0x53, 0x57, 0xd0, 0xdc, 0x3e, 0x18, 0xa8, 0x5a, 0xb0, 0xca, 0x9b, 0x3a, 0x86, 0x7f, 0x49,
	0xec, 0x36, 0xb2, 0x70, 0xc6, 0x18, 0x10, 0x11, 0x72, 0x59, 0x5c, 0x12, 0xab, 0x04, 0xa6, 0x56,
	0x55, 0x47, 0xf6, 0x2d, 0x64, 0xaa, 0xed, 0x90, 0x41, 0xc4, 0x29, 0x91, 0x58, 0x16, 0x83, 0x65,
	0x25, 0x06, 0x52, 0xab, 0xbf, 0x32, 0x90, 0x73, 0x48, 0x19, 0x86, 0xb9, 0x3d, 0x9b, 0xe6, 0xd1,
	0xe9, 0xd8, 0x35, 0xce, 0xc6, 0xae, 0xf1, 0x65, 0xec, 0x1a, 0x6f, 0x26, 0x6e, 0xe9, 0x6c, 0xe2,
	0x96, 0x3e, 0x4d, 0xdc, 0xd2, 0xd1, 0xc3, 0xa9, 0xeb, 0xb9, 0x32, 0x99, 0xb6, 0x2f, 0x46, 0xd3,
	0xf0, 0x07, 0xe3, 0x4a, 0x5e, 0x5e, 0xeb, 0x7f, 0x39, 0x90, 0xee, 0x7e, 0x0b, 0x00, 0x00, 0xff,
	0xff, 0x53, 0xaa, 0x8b, 0xce, 0x59, 0x07, 0x00, 0x00,
}

func (m *RegisterContractEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterContractEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterContractEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockFrequency != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.BlockFrequency))
		i--
		dAtA[i] = 0x28
	}
	if m.ExecutionType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ExecutionType))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.ContractDeposit.Size()
		i -= size
		if _, err := m.ContractDeposit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ModuleName) > 0 {
		i -= len(m.ModuleName)
		copy(dAtA[i:], m.ModuleName)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ModuleName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ModifyContractEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModifyContractEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModifyContractEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NewBlockFrequency != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.NewBlockFrequency))
		i--
		dAtA[i] = 0x20
	}
	if m.NewExecutionType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.NewExecutionType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ModuleName) > 0 {
		i -= len(m.ModuleName)
		copy(dAtA[i:], m.ModuleName)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ModuleName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveContractEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveContractEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveContractEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.RefundAmount.Size()
		i -= size
		if _, err := m.RefundAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.RefundAccount) > 0 {
		i -= len(m.RefundAccount)
		copy(dAtA[i:], m.RefundAccount)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RefundAccount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ModuleName) > 0 {
		i -= len(m.ModuleName)
		copy(dAtA[i:], m.ModuleName)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ModuleName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FundExistentContractEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FundExistentContractEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FundExistentContractEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.DepositAmount.Size()
		i -= size
		if _, err := m.DepositAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.SenderAddress) > 0 {
		i -= len(m.SenderAddress)
		copy(dAtA[i:], m.SenderAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SenderAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ModuleName) > 0 {
		i -= len(m.ModuleName)
		copy(dAtA[i:], m.ModuleName)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ModuleName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContractStrikeEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractStrikeEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractStrikeEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StrikeReason) > 0 {
		i -= len(m.StrikeReason)
		copy(dAtA[i:], m.StrikeReason)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.StrikeReason)))
		i--
		dAtA[i] = 0x22
	}
	if m.CurrentStrike != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.CurrentStrike))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ModuleName) > 0 {
		i -= len(m.ModuleName)
		copy(dAtA[i:], m.ModuleName)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ModuleName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ForceRemoveContractEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForceRemoveContractEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForceRemoveContractEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ModuleName) > 0 {
		i -= len(m.ModuleName)
		copy(dAtA[i:], m.ModuleName)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ModuleName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RegisterContractEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ModuleName)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.ContractDeposit.Size()
	n += 1 + l + sovEvents(uint64(l))
	if m.ExecutionType != 0 {
		n += 1 + sovEvents(uint64(m.ExecutionType))
	}
	if m.BlockFrequency != 0 {
		n += 1 + sovEvents(uint64(m.BlockFrequency))
	}
	return n
}

func (m *ModifyContractEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ModuleName)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.NewExecutionType != 0 {
		n += 1 + sovEvents(uint64(m.NewExecutionType))
	}
	if m.NewBlockFrequency != 0 {
		n += 1 + sovEvents(uint64(m.NewBlockFrequency))
	}
	return n
}

func (m *RemoveContractEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ModuleName)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.RefundAccount)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.RefundAmount.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *FundExistentContractEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ModuleName)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.SenderAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.DepositAmount.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *ContractStrikeEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ModuleName)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.CurrentStrike != 0 {
		n += 1 + sovEvents(uint64(m.CurrentStrike))
	}
	l = len(m.StrikeReason)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *ForceRemoveContractEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ModuleName)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RegisterContractEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterContractEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterContractEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractDeposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ContractDeposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionType", wireType)
			}
			m.ExecutionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutionType |= ExecutionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockFrequency", wireType)
			}
			m.BlockFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockFrequency |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModifyContractEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModifyContractEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModifyContractEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewExecutionType", wireType)
			}
			m.NewExecutionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewExecutionType |= ExecutionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewBlockFrequency", wireType)
			}
			m.NewBlockFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewBlockFrequency |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveContractEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveContractEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveContractEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefundAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RefundAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FundExistentContractEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FundExistentContractEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FundExistentContractEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DepositAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractStrikeEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractStrikeEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractStrikeEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentStrike", wireType)
			}
			m.CurrentStrike = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentStrike |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrikeReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrikeReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForceRemoveContractEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForceRemoveContractEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForceRemoveContractEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
