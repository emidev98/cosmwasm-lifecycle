// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmwasmlifecycle/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Anyone can send funds for an already registered contract
// to continue with its execution at begin or end block.
// This funds will be in custody of the cosmwsmlifecycle module
// and will be returned to the address specified in the
// MsgRemoveContractProposal when the contract is disabled
// by governance.If the contract reaches the maximum number
// of strikes all funds related to the contract will be burned.
type MsgFundExistentContract struct {
	// Sender&signer of the funds.
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// Address of the contract to fund.
	ContractAddr string `protobuf:"bytes,2,opt,name=contract_addr,json=contractAddr,proto3" json:"contract_addr,omitempty"`
	// Collateral deposited to the contract.
	Deposit github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,3,opt,name=deposit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"deposit"`
}

func (m *MsgFundExistentContract) Reset()         { *m = MsgFundExistentContract{} }
func (m *MsgFundExistentContract) String() string { return proto.CompactTextString(m) }
func (*MsgFundExistentContract) ProtoMessage()    {}
func (*MsgFundExistentContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a8c9d0c2a02a50a, []int{0}
}
func (m *MsgFundExistentContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFundExistentContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFundExistentContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFundExistentContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFundExistentContract.Merge(m, src)
}
func (m *MsgFundExistentContract) XXX_Size() int {
	return m.Size()
}
func (m *MsgFundExistentContract) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFundExistentContract.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFundExistentContract proto.InternalMessageInfo

func (m *MsgFundExistentContract) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgFundExistentContract) GetContractAddr() string {
	if m != nil {
		return m.ContractAddr
	}
	return ""
}

type MsgFundExistentContractResponse struct {
}

func (m *MsgFundExistentContractResponse) Reset()         { *m = MsgFundExistentContractResponse{} }
func (m *MsgFundExistentContractResponse) String() string { return proto.CompactTextString(m) }
func (*MsgFundExistentContractResponse) ProtoMessage()    {}
func (*MsgFundExistentContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a8c9d0c2a02a50a, []int{1}
}
func (m *MsgFundExistentContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFundExistentContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFundExistentContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFundExistentContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFundExistentContractResponse.Merge(m, src)
}
func (m *MsgFundExistentContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgFundExistentContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFundExistentContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFundExistentContractResponse proto.InternalMessageInfo

// Authority message to update the module parameters allowed only thought governance.
type MsgUpdateParamsProposal struct {
	// the title of the update proposal
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// the description of the proposal
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// gov account address
	Authority string `protobuf:"bytes,3,opt,name=authority,proto3" json:"authority,omitempty"`
	// cosmwasm-lifecycle module params
	Params Params `protobuf:"bytes,4,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParamsProposal) Reset()         { *m = MsgUpdateParamsProposal{} }
func (m *MsgUpdateParamsProposal) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsProposal) ProtoMessage()    {}
func (*MsgUpdateParamsProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a8c9d0c2a02a50a, []int{2}
}
func (m *MsgUpdateParamsProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsProposal.Merge(m, src)
}
func (m *MsgUpdateParamsProposal) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsProposal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsProposal proto.InternalMessageInfo

func (m *MsgUpdateParamsProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MsgUpdateParamsProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgUpdateParamsProposal) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParamsProposal) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type MsgUpdateParamsProposalResponse struct {
}

func (m *MsgUpdateParamsProposalResponse) Reset()         { *m = MsgUpdateParamsProposalResponse{} }
func (m *MsgUpdateParamsProposalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsProposalResponse) ProtoMessage()    {}
func (*MsgUpdateParamsProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a8c9d0c2a02a50a, []int{3}
}
func (m *MsgUpdateParamsProposalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsProposalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsProposalResponse.Merge(m, src)
}
func (m *MsgUpdateParamsProposalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsProposalResponse proto.InternalMessageInfo

// Authority message to register a contract for
// execution at begin or end block. If the specified
// contract is already registered this message will fail.
type MsgRegisterContractProposal struct {
	// the title of the update proposal
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// the description of the proposal
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// gov account  address
	Authority string `protobuf:"bytes,3,opt,name=authority,proto3" json:"authority,omitempty"`
	// collateral deposited to enable contract execution
	ContractDeposit github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,4,opt,name=contract_deposit,json=contractDeposit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"contract_deposit"`
	// address of the contract to enable its methods execution
	ContractAddr string `protobuf:"bytes,5,opt,name=contract_addr,json=contractAddr,proto3" json:"contract_addr,omitempty"`
	// execution type to enable on begin, end block or both
	ExecutionType ExecutionType `protobuf:"varint,6,opt,name=execution_type,json=executionType,proto3,enum=cosmwasmlifecycle.ExecutionType" json:"execution_type,omitempty"`
	// execution each block or every n blocks
	ExecutionBlocksFrequency int64 `protobuf:"varint,7,opt,name=execution_blocks_frequency,json=executionBlocksFrequency,proto3" json:"execution_blocks_frequency,omitempty"`
}

func (m *MsgRegisterContractProposal) Reset()         { *m = MsgRegisterContractProposal{} }
func (m *MsgRegisterContractProposal) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterContractProposal) ProtoMessage()    {}
func (*MsgRegisterContractProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a8c9d0c2a02a50a, []int{4}
}
func (m *MsgRegisterContractProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterContractProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterContractProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterContractProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterContractProposal.Merge(m, src)
}
func (m *MsgRegisterContractProposal) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterContractProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterContractProposal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterContractProposal proto.InternalMessageInfo

func (m *MsgRegisterContractProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MsgRegisterContractProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgRegisterContractProposal) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgRegisterContractProposal) GetContractAddr() string {
	if m != nil {
		return m.ContractAddr
	}
	return ""
}

func (m *MsgRegisterContractProposal) GetExecutionType() ExecutionType {
	if m != nil {
		return m.ExecutionType
	}
	return ExecutionType_BEGIN_BLOCK
}

func (m *MsgRegisterContractProposal) GetExecutionBlocksFrequency() int64 {
	if m != nil {
		return m.ExecutionBlocksFrequency
	}
	return 0
}

type MsgRegisterContractProposalResponse struct {
}

func (m *MsgRegisterContractProposalResponse) Reset()         { *m = MsgRegisterContractProposalResponse{} }
func (m *MsgRegisterContractProposalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterContractProposalResponse) ProtoMessage()    {}
func (*MsgRegisterContractProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a8c9d0c2a02a50a, []int{5}
}
func (m *MsgRegisterContractProposalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterContractProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterContractProposalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterContractProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterContractProposalResponse.Merge(m, src)
}
func (m *MsgRegisterContractProposalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterContractProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterContractProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterContractProposalResponse proto.InternalMessageInfo

// Authority message, to modify an already registered contract execution.
// Operation can be ENABLE or DISABLE the execution type specified in the execution field.
// If the specified contract is not existent this message will fail.
type MsgModifyContractProposal struct {
	// the title of the update proposal
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// the description of the proposal
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// gov account  address
	Authority string `protobuf:"bytes,3,opt,name=authority,proto3" json:"authority,omitempty"`
	// address of the contract to modify its execution params
	ContractAddr string `protobuf:"bytes,4,opt,name=contract_addr,json=contractAddr,proto3" json:"contract_addr,omitempty"`
	// execution type begin block, end block or both
	ExecutionType ExecutionType `protobuf:"varint,5,opt,name=execution_type,json=executionType,proto3,enum=cosmwasmlifecycle.ExecutionType" json:"execution_type,omitempty"`
	// ENABLE or DISABLE the execution type specified in the execution field
	Operation ExecutionTypeOperation `protobuf:"varint,6,opt,name=operation,proto3,enum=cosmwasmlifecycle.ExecutionTypeOperation" json:"operation,omitempty"`
	// execution each block or every n blocks
	ExecutionBlocksFrequency int64 `protobuf:"varint,7,opt,name=execution_blocks_frequency,json=executionBlocksFrequency,proto3" json:"execution_blocks_frequency,omitempty"`
}

func (m *MsgModifyContractProposal) Reset()         { *m = MsgModifyContractProposal{} }
func (m *MsgModifyContractProposal) String() string { return proto.CompactTextString(m) }
func (*MsgModifyContractProposal) ProtoMessage()    {}
func (*MsgModifyContractProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a8c9d0c2a02a50a, []int{6}
}
func (m *MsgModifyContractProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgModifyContractProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgModifyContractProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgModifyContractProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgModifyContractProposal.Merge(m, src)
}
func (m *MsgModifyContractProposal) XXX_Size() int {
	return m.Size()
}
func (m *MsgModifyContractProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgModifyContractProposal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgModifyContractProposal proto.InternalMessageInfo

func (m *MsgModifyContractProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MsgModifyContractProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgModifyContractProposal) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgModifyContractProposal) GetContractAddr() string {
	if m != nil {
		return m.ContractAddr
	}
	return ""
}

func (m *MsgModifyContractProposal) GetExecutionType() ExecutionType {
	if m != nil {
		return m.ExecutionType
	}
	return ExecutionType_BEGIN_BLOCK
}

func (m *MsgModifyContractProposal) GetOperation() ExecutionTypeOperation {
	if m != nil {
		return m.Operation
	}
	return ExecutionTypeOperation_ENABLE
}

func (m *MsgModifyContractProposal) GetExecutionBlocksFrequency() int64 {
	if m != nil {
		return m.ExecutionBlocksFrequency
	}
	return 0
}

type MsgModifyContractProposalResponse struct {
}

func (m *MsgModifyContractProposalResponse) Reset()         { *m = MsgModifyContractProposalResponse{} }
func (m *MsgModifyContractProposalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgModifyContractProposalResponse) ProtoMessage()    {}
func (*MsgModifyContractProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a8c9d0c2a02a50a, []int{7}
}
func (m *MsgModifyContractProposalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgModifyContractProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgModifyContractProposalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgModifyContractProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgModifyContractProposalResponse.Merge(m, src)
}
func (m *MsgModifyContractProposalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgModifyContractProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgModifyContractProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgModifyContractProposalResponse proto.InternalMessageInfo

// Authority message to remove a contract execution,
// This message will send the collateral back to the specified address
type MsgRemoveContractProposal struct {
	// the title of the update proposal
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// the description of the proposal
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// gov account address
	Authority string `protobuf:"bytes,3,opt,name=authority,proto3" json:"authority,omitempty"`
	// account address of the contract to enable its methods execution
	ContractAddr string `protobuf:"bytes,4,opt,name=contract_addr,json=contractAddr,proto3" json:"contract_addr,omitempty"`
	// account address to send the collateral back
	DepositRefundAccount string `protobuf:"bytes,5,opt,name=deposit_refund_account,json=depositRefundAccount,proto3" json:"deposit_refund_account,omitempty"`
}

func (m *MsgRemoveContractProposal) Reset()         { *m = MsgRemoveContractProposal{} }
func (m *MsgRemoveContractProposal) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveContractProposal) ProtoMessage()    {}
func (*MsgRemoveContractProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a8c9d0c2a02a50a, []int{8}
}
func (m *MsgRemoveContractProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveContractProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveContractProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveContractProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveContractProposal.Merge(m, src)
}
func (m *MsgRemoveContractProposal) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveContractProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveContractProposal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveContractProposal proto.InternalMessageInfo

func (m *MsgRemoveContractProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MsgRemoveContractProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgRemoveContractProposal) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgRemoveContractProposal) GetContractAddr() string {
	if m != nil {
		return m.ContractAddr
	}
	return ""
}

func (m *MsgRemoveContractProposal) GetDepositRefundAccount() string {
	if m != nil {
		return m.DepositRefundAccount
	}
	return ""
}

type MsgRemoveContractProposalResponse struct {
}

func (m *MsgRemoveContractProposalResponse) Reset()         { *m = MsgRemoveContractProposalResponse{} }
func (m *MsgRemoveContractProposalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveContractProposalResponse) ProtoMessage()    {}
func (*MsgRemoveContractProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a8c9d0c2a02a50a, []int{9}
}
func (m *MsgRemoveContractProposalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveContractProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveContractProposalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveContractProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveContractProposalResponse.Merge(m, src)
}
func (m *MsgRemoveContractProposalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveContractProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveContractProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveContractProposalResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgFundExistentContract)(nil), "cosmwasmlifecycle.MsgFundExistentContract")
	proto.RegisterType((*MsgFundExistentContractResponse)(nil), "cosmwasmlifecycle.MsgFundExistentContractResponse")
	proto.RegisterType((*MsgUpdateParamsProposal)(nil), "cosmwasmlifecycle.MsgUpdateParamsProposal")
	proto.RegisterType((*MsgUpdateParamsProposalResponse)(nil), "cosmwasmlifecycle.MsgUpdateParamsProposalResponse")
	proto.RegisterType((*MsgRegisterContractProposal)(nil), "cosmwasmlifecycle.MsgRegisterContractProposal")
	proto.RegisterType((*MsgRegisterContractProposalResponse)(nil), "cosmwasmlifecycle.MsgRegisterContractProposalResponse")
	proto.RegisterType((*MsgModifyContractProposal)(nil), "cosmwasmlifecycle.MsgModifyContractProposal")
	proto.RegisterType((*MsgModifyContractProposalResponse)(nil), "cosmwasmlifecycle.MsgModifyContractProposalResponse")
	proto.RegisterType((*MsgRemoveContractProposal)(nil), "cosmwasmlifecycle.MsgRemoveContractProposal")
	proto.RegisterType((*MsgRemoveContractProposalResponse)(nil), "cosmwasmlifecycle.MsgRemoveContractProposalResponse")
}

func init() { proto.RegisterFile("cosmwasmlifecycle/tx.proto", fileDescriptor_5a8c9d0c2a02a50a) }

var fileDescriptor_5a8c9d0c2a02a50a = []byte{
	// 808 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0xdf, 0x4f, 0xd3, 0x40,
	0x1c, 0x5f, 0xd9, 0x18, 0xe1, 0x80, 0x89, 0x75, 0x81, 0x32, 0x93, 0x6e, 0x40, 0xd4, 0x49, 0x64,
	0x95, 0x69, 0x50, 0x89, 0x26, 0x32, 0x04, 0x9e, 0xa6, 0xa4, 0xea, 0x0b, 0x2f, 0x4b, 0xd7, 0xde,
	0x4a, 0xc3, 0xda, 0xab, 0xbd, 0xeb, 0xdc, 0x7c, 0x34, 0x31, 0xf1, 0xd1, 0x3f, 0x81, 0x3f, 0xc1,
	0x18, 0xff, 0x08, 0x1e, 0x09, 0x89, 0x89, 0xf1, 0x81, 0x98, 0xf1, 0xa0, 0x7f, 0x86, 0x69, 0x7b,
	0xdd, 0x3a, 0xd7, 0x6e, 0xe2, 0x8f, 0x10, 0x9f, 0xb6, 0xbb, 0xfb, 0x7c, 0xbf, 0xdf, 0xfb, 0x7e,
	0x3e, 0x9f, 0xde, 0x1d, 0xc8, 0xc8, 0x08, 0xeb, 0x2f, 0x25, 0xac, 0xd7, 0xb5, 0x1a, 0x94, 0x5b,
	0x72, 0x1d, 0x0a, 0xa4, 0x59, 0x30, 0x2d, 0x44, 0x10, 0x7b, 0xb1, 0x6f, 0x2d, 0xc3, 0x3b, 0x53,
	0x08, 0x0b, 0x55, 0x09, 0x43, 0xa1, 0xb1, 0x52, 0x85, 0x44, 0x5a, 0x11, 0x64, 0xa4, 0x19, 0x5e,
	0x48, 0x66, 0x96, 0xae, 0xeb, 0x58, 0x15, 0x1a, 0x2b, 0xce, 0x0f, 0x5d, 0x98, 0xf3, 0x16, 0x2a,
	0xee, 0x48, 0xf0, 0x06, 0x74, 0xe9, 0x6a, 0xff, 0x16, 0x60, 0x13, 0xca, 0x36, 0xd1, 0x90, 0x51,
	0x21, 0x2d, 0x13, 0x52, 0x1c, 0xdf, 0x8f, 0x33, 0x25, 0x4b, 0xd2, 0xfd, 0x3c, 0x69, 0x15, 0xa9,
	0xc8, 0xcb, 0xef, 0xfc, 0xf3, 0x66, 0x17, 0xde, 0x8c, 0x80, 0xd9, 0x32, 0x56, 0xb7, 0x6c, 0x43,
	0xd9, 0x6c, 0x6a, 0x98, 0x40, 0x83, 0x6c, 0x20, 0x83, 0x58, 0x92, 0x4c, 0xd8, 0x9b, 0x20, 0x89,
	0xa1, 0xa1, 0x40, 0x8b, 0x63, 0x72, 0x4c, 0x7e, 0xbc, 0xc4, 0x1d, 0x7f, 0x5c, 0x4e, 0xd3, 0xbd,
	0xad, 0x2b, 0x8a, 0x05, 0x31, 0x7e, 0x4a, 0x2c, 0xcd, 0x50, 0x45, 0x8a, 0x63, 0x1f, 0x80, 0x29,
	0x99, 0x46, 0x57, 0x24, 0x45, 0xb1, 0xb8, 0x91, 0x21, 0x81, 0x93, 0x3e, 0xdc, 0x99, 0x66, 0x15,
	0x30, 0xa6, 0x40, 0x13, 0x61, 0x8d, 0x70, 0xf1, 0x1c, 0x93, 0x9f, 0x28, 0xce, 0x15, 0x68, 0x94,
	0x43, 0x68, 0x81, 0x12, 0x5a, 0xd8, 0x40, 0x9a, 0x51, 0x12, 0x0e, 0x4f, 0xb2, 0xb1, 0x2f, 0x27,
	0xd9, 0x6b, 0xaa, 0x46, 0xf6, 0xec, 0x6a, 0x41, 0x46, 0x3a, 0xe5, 0x8d, 0xfe, 0x2c, 0x63, 0x65,
	0x5f, 0x70, 0xf8, 0xc1, 0x6e, 0x80, 0xe8, 0xa7, 0x5e, 0xbb, 0xf4, 0xf6, 0x20, 0xcb, 0x7c, 0x3f,
	0xc8, 0x32, 0xaf, 0xbf, 0xbd, 0x5f, 0xa2, 0x3b, 0x5f, 0x98, 0x07, 0xd9, 0x08, 0x1a, 0x44, 0x88,
	0x4d, 0x64, 0x60, 0xb8, 0x70, 0xcc, 0xb8, 0x54, 0x3d, 0x37, 0x15, 0x89, 0xc0, 0x1d, 0x97, 0xda,
	0x1d, 0x0b, 0x99, 0x08, 0x4b, 0x75, 0x36, 0x0d, 0x46, 0x89, 0x46, 0xea, 0xd0, 0x63, 0x4a, 0xf4,
	0x06, 0x6c, 0x0e, 0x4c, 0x28, 0x10, 0xcb, 0x96, 0x66, 0x3a, 0x62, 0x79, 0x64, 0x88, 0xc1, 0x29,
	0x76, 0x15, 0x8c, 0x4b, 0x36, 0xd9, 0x43, 0x96, 0x46, 0x5a, 0x6e, 0xcf, 0x83, 0xc8, 0xea, 0x42,
	0xd9, 0x3b, 0x20, 0xe9, 0x89, 0xcb, 0x25, 0x02, 0x44, 0xf5, 0xa8, 0x5f, 0xf0, 0xb6, 0x58, 0x4a,
	0x38, 0x44, 0x89, 0x14, 0xbe, 0x96, 0x72, 0x9a, 0xee, 0x26, 0xa2, 0x7d, 0x87, 0xf5, 0xd4, 0xe9,
	0xbb, 0x1d, 0x07, 0x97, 0xcb, 0x58, 0x15, 0xa1, 0xea, 0x10, 0x63, 0xf9, 0xbc, 0x9c, 0x5b, 0xef,
	0x36, 0x98, 0xee, 0x98, 0xcc, 0xb7, 0x4b, 0xe2, 0xaf, 0xdb, 0xe5, 0x82, 0x5f, 0xe3, 0x91, 0x57,
	0xa2, 0xdf, 0xdb, 0xa3, 0x67, 0xf2, 0xf6, 0x36, 0x48, 0xf5, 0x7e, 0xb6, 0x5c, 0x32, 0xc7, 0xe4,
	0x53, 0xc5, 0x5c, 0x88, 0x72, 0x9b, 0x3e, 0xf0, 0x59, 0xcb, 0x84, 0xe2, 0x14, 0x0c, 0x0e, 0xd9,
	0xfb, 0x20, 0xd3, 0x4d, 0x54, 0xad, 0x23, 0x79, 0x1f, 0x57, 0x6a, 0x16, 0x7c, 0x61, 0x43, 0x43,
	0x6e, 0x71, 0x63, 0x39, 0x26, 0x1f, 0x17, 0xb9, 0x0e, 0xa2, 0xe4, 0x02, 0xb6, 0xfc, 0xf5, 0xb5,
	0x99, 0xa0, 0xf9, 0x03, 0x3e, 0xb8, 0x02, 0x16, 0x07, 0x68, 0xdc, 0xf1, 0xc2, 0x87, 0x38, 0x98,
	0x2b, 0x63, 0xb5, 0x8c, 0x14, 0xad, 0xd6, 0x3a, 0x77, 0x27, 0xf4, 0x49, 0x92, 0xf8, 0x43, 0x49,
	0x46, 0x7f, 0x4f, 0x92, 0x6d, 0x30, 0x8e, 0x4c, 0x68, 0x49, 0x6e, 0x7f, 0x9e, 0xac, 0xd7, 0x87,
	0xe5, 0x78, 0xe2, 0x07, 0x88, 0xdd, 0xd8, 0x7f, 0xa4, 0xed, 0x22, 0x98, 0x8f, 0xd4, 0xac, 0xab,
	0xec, 0x88, 0xab, 0xac, 0x08, 0x75, 0xd4, 0x80, 0xff, 0xbb, 0xb2, 0x8f, 0xc1, 0x0c, 0x3d, 0x19,
	0x2a, 0x16, 0xac, 0xd9, 0x86, 0x52, 0x91, 0x64, 0x19, 0xd9, 0x06, 0x19, 0xfa, 0xd1, 0xa6, 0x69,
	0x9c, 0xe8, 0x86, 0xad, 0x7b, 0x51, 0x43, 0x98, 0x0d, 0xe7, 0xcc, 0x67, 0xb6, 0xf8, 0x29, 0x01,
	0xe2, 0x65, 0xac, 0xb2, 0x0d, 0x90, 0x0e, 0xbd, 0x66, 0x97, 0x42, 0xac, 0x12, 0x71, 0x17, 0x65,
	0x8a, 0xbf, 0x8e, 0xf5, 0xeb, 0xb3, 0x06, 0x98, 0x0c, 0x9e, 0xef, 0x51, 0xf5, 0xc2, 0xee, 0x80,
	0xa8, 0x7a, 0x83, 0xee, 0x0b, 0xf6, 0x15, 0x98, 0xfe, 0xf9, 0x1c, 0x61, 0x0b, 0xe1, 0x79, 0xa2,
	0xce, 0x9b, 0xcc, 0xea, 0xd9, 0xf0, 0x9d, 0xda, 0x04, 0xa4, 0x7a, 0x7d, 0xce, 0xde, 0x08, 0xcf,
	0x14, 0xfe, 0x35, 0x64, 0x6e, 0x9f, 0x05, 0x1d, 0xac, 0xda, 0xeb, 0x81, 0xa8, 0xaa, 0xe1, 0x4e,
	0x89, 0xaa, 0x3a, 0xd8, 0x57, 0xa5, 0xdd, 0xc3, 0x36, 0xcf, 0x1c, 0xb5, 0x79, 0xe6, 0x6b, 0x9b,
	0x67, 0xde, 0x9d, 0xf2, 0xb1, 0xa3, 0x53, 0x3e, 0xf6, 0xf9, 0x94, 0x8f, 0xed, 0x3e, 0x0c, 0x5c,
	0x72, 0x50, 0xd7, 0x14, 0xd8, 0xb8, 0x77, 0x57, 0xf0, 0x4b, 0x2c, 0x77, 0xdf, 0x87, 0x4d, 0x21,
	0xe4, 0x79, 0xeb, 0x5c, 0x81, 0xd5, 0xa4, 0xfb, 0x3a, 0xbc, 0xf5, 0x23, 0x00, 0x00, 0xff, 0xff,
	0x91, 0x14, 0xd8, 0xb5, 0x00, 0x0b, 0x00, 0x00,
}

func (this *MsgFundExistentContract) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgFundExistentContract)
	if !ok {
		that2, ok := that.(MsgFundExistentContract)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	if this.ContractAddr != that1.ContractAddr {
		return false
	}
	if !this.Deposit.Equal(that1.Deposit) {
		return false
	}
	return true
}
func (this *MsgRegisterContractProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgRegisterContractProposal)
	if !ok {
		that2, ok := that.(MsgRegisterContractProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Authority != that1.Authority {
		return false
	}
	if !this.ContractDeposit.Equal(that1.ContractDeposit) {
		return false
	}
	if this.ContractAddr != that1.ContractAddr {
		return false
	}
	if this.ExecutionType != that1.ExecutionType {
		return false
	}
	if this.ExecutionBlocksFrequency != that1.ExecutionBlocksFrequency {
		return false
	}
	return true
}
func (this *MsgModifyContractProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgModifyContractProposal)
	if !ok {
		that2, ok := that.(MsgModifyContractProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Authority != that1.Authority {
		return false
	}
	if this.ContractAddr != that1.ContractAddr {
		return false
	}
	if this.ExecutionType != that1.ExecutionType {
		return false
	}
	if this.Operation != that1.Operation {
		return false
	}
	if this.ExecutionBlocksFrequency != that1.ExecutionBlocksFrequency {
		return false
	}
	return true
}
func (this *MsgRemoveContractProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgRemoveContractProposal)
	if !ok {
		that2, ok := that.(MsgRemoveContractProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Authority != that1.Authority {
		return false
	}
	if this.ContractAddr != that1.ContractAddr {
		return false
	}
	if this.DepositRefundAccount != that1.DepositRefundAccount {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// Allow anyone to deposit funds for a smart contract to be executed
	// at begin and end block. This is useful when the parameters are updated.
	// and a contract will not have enough funds to execute.
	FundExistentContract(ctx context.Context, in *MsgFundExistentContract, opts ...grpc.CallOption) (*MsgFundExistentContractResponse, error)
	// Update module parameters allowed only thought governance.
	UpdateParams(ctx context.Context, in *MsgUpdateParamsProposal, opts ...grpc.CallOption) (*MsgUpdateParamsProposalResponse, error)
	// Register a contract execution for begin or end block
	// allowed only thoguht governance.
	RegisterContract(ctx context.Context, in *MsgRegisterContractProposal, opts ...grpc.CallOption) (*MsgRegisterContractProposalResponse, error)
	// Modify an already registered contract execution at begin or end block
	ModifyContract(ctx context.Context, in *MsgModifyContractProposal, opts ...grpc.CallOption) (*MsgModifyContractProposalResponse, error)
	// Remove registered contract execution thoguht governance
	// and send the collateral back to the specified address.
	RemoveContract(ctx context.Context, in *MsgRemoveContractProposal, opts ...grpc.CallOption) (*MsgRemoveContractProposalResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) FundExistentContract(ctx context.Context, in *MsgFundExistentContract, opts ...grpc.CallOption) (*MsgFundExistentContractResponse, error) {
	out := new(MsgFundExistentContractResponse)
	err := c.cc.Invoke(ctx, "/cosmwasmlifecycle.Msg/FundExistentContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParamsProposal, opts ...grpc.CallOption) (*MsgUpdateParamsProposalResponse, error) {
	out := new(MsgUpdateParamsProposalResponse)
	err := c.cc.Invoke(ctx, "/cosmwasmlifecycle.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterContract(ctx context.Context, in *MsgRegisterContractProposal, opts ...grpc.CallOption) (*MsgRegisterContractProposalResponse, error) {
	out := new(MsgRegisterContractProposalResponse)
	err := c.cc.Invoke(ctx, "/cosmwasmlifecycle.Msg/RegisterContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ModifyContract(ctx context.Context, in *MsgModifyContractProposal, opts ...grpc.CallOption) (*MsgModifyContractProposalResponse, error) {
	out := new(MsgModifyContractProposalResponse)
	err := c.cc.Invoke(ctx, "/cosmwasmlifecycle.Msg/ModifyContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveContract(ctx context.Context, in *MsgRemoveContractProposal, opts ...grpc.CallOption) (*MsgRemoveContractProposalResponse, error) {
	out := new(MsgRemoveContractProposalResponse)
	err := c.cc.Invoke(ctx, "/cosmwasmlifecycle.Msg/RemoveContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// Allow anyone to deposit funds for a smart contract to be executed
	// at begin and end block. This is useful when the parameters are updated.
	// and a contract will not have enough funds to execute.
	FundExistentContract(context.Context, *MsgFundExistentContract) (*MsgFundExistentContractResponse, error)
	// Update module parameters allowed only thought governance.
	UpdateParams(context.Context, *MsgUpdateParamsProposal) (*MsgUpdateParamsProposalResponse, error)
	// Register a contract execution for begin or end block
	// allowed only thoguht governance.
	RegisterContract(context.Context, *MsgRegisterContractProposal) (*MsgRegisterContractProposalResponse, error)
	// Modify an already registered contract execution at begin or end block
	ModifyContract(context.Context, *MsgModifyContractProposal) (*MsgModifyContractProposalResponse, error)
	// Remove registered contract execution thoguht governance
	// and send the collateral back to the specified address.
	RemoveContract(context.Context, *MsgRemoveContractProposal) (*MsgRemoveContractProposalResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) FundExistentContract(ctx context.Context, req *MsgFundExistentContract) (*MsgFundExistentContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FundExistentContract not implemented")
}
func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParamsProposal) (*MsgUpdateParamsProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) RegisterContract(ctx context.Context, req *MsgRegisterContractProposal) (*MsgRegisterContractProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterContract not implemented")
}
func (*UnimplementedMsgServer) ModifyContract(ctx context.Context, req *MsgModifyContractProposal) (*MsgModifyContractProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyContract not implemented")
}
func (*UnimplementedMsgServer) RemoveContract(ctx context.Context, req *MsgRemoveContractProposal) (*MsgRemoveContractProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveContract not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_FundExistentContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFundExistentContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).FundExistentContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmwasmlifecycle.Msg/FundExistentContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).FundExistentContract(ctx, req.(*MsgFundExistentContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParamsProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmwasmlifecycle.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParamsProposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterContractProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmwasmlifecycle.Msg/RegisterContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterContract(ctx, req.(*MsgRegisterContractProposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ModifyContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgModifyContractProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ModifyContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmwasmlifecycle.Msg/ModifyContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ModifyContract(ctx, req.(*MsgModifyContractProposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveContractProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmwasmlifecycle.Msg/RemoveContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveContract(ctx, req.(*MsgRemoveContractProposal))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cosmwasmlifecycle.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FundExistentContract",
			Handler:    _Msg_FundExistentContract_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "RegisterContract",
			Handler:    _Msg_RegisterContract_Handler,
		},
		{
			MethodName: "ModifyContract",
			Handler:    _Msg_ModifyContract_Handler,
		},
		{
			MethodName: "RemoveContract",
			Handler:    _Msg_RemoveContract_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cosmwasmlifecycle/tx.proto",
}

func (m *MsgFundExistentContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFundExistentContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFundExistentContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Deposit.Size()
		i -= size
		if _, err := m.Deposit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ContractAddr) > 0 {
		i -= len(m.ContractAddr)
		copy(dAtA[i:], m.ContractAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFundExistentContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFundExistentContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFundExistentContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsProposalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsProposalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsProposalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRegisterContractProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterContractProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterContractProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExecutionBlocksFrequency != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ExecutionBlocksFrequency))
		i--
		dAtA[i] = 0x38
	}
	if m.ExecutionType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ExecutionType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ContractAddr) > 0 {
		i -= len(m.ContractAddr)
		copy(dAtA[i:], m.ContractAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractAddr)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size := m.ContractDeposit.Size()
		i -= size
		if _, err := m.ContractDeposit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterContractProposalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterContractProposalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterContractProposalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgModifyContractProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgModifyContractProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgModifyContractProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExecutionBlocksFrequency != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ExecutionBlocksFrequency))
		i--
		dAtA[i] = 0x38
	}
	if m.Operation != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Operation))
		i--
		dAtA[i] = 0x30
	}
	if m.ExecutionType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ExecutionType))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ContractAddr) > 0 {
		i -= len(m.ContractAddr)
		copy(dAtA[i:], m.ContractAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractAddr)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgModifyContractProposalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgModifyContractProposalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgModifyContractProposalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveContractProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveContractProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveContractProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DepositRefundAccount) > 0 {
		i -= len(m.DepositRefundAccount)
		copy(dAtA[i:], m.DepositRefundAccount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DepositRefundAccount)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ContractAddr) > 0 {
		i -= len(m.ContractAddr)
		copy(dAtA[i:], m.ContractAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractAddr)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveContractProposalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveContractProposalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveContractProposalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgFundExistentContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ContractAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Deposit.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgFundExistentContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateParamsProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsProposalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRegisterContractProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.ContractDeposit.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.ContractAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ExecutionType != 0 {
		n += 1 + sovTx(uint64(m.ExecutionType))
	}
	if m.ExecutionBlocksFrequency != 0 {
		n += 1 + sovTx(uint64(m.ExecutionBlocksFrequency))
	}
	return n
}

func (m *MsgRegisterContractProposalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgModifyContractProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ContractAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ExecutionType != 0 {
		n += 1 + sovTx(uint64(m.ExecutionType))
	}
	if m.Operation != 0 {
		n += 1 + sovTx(uint64(m.Operation))
	}
	if m.ExecutionBlocksFrequency != 0 {
		n += 1 + sovTx(uint64(m.ExecutionBlocksFrequency))
	}
	return n
}

func (m *MsgModifyContractProposalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveContractProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ContractAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DepositRefundAccount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRemoveContractProposalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgFundExistentContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFundExistentContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFundExistentContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Deposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFundExistentContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFundExistentContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFundExistentContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsProposalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsProposalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsProposalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterContractProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterContractProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterContractProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractDeposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ContractDeposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionType", wireType)
			}
			m.ExecutionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutionType |= ExecutionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionBlocksFrequency", wireType)
			}
			m.ExecutionBlocksFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutionBlocksFrequency |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterContractProposalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterContractProposalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterContractProposalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgModifyContractProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgModifyContractProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgModifyContractProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionType", wireType)
			}
			m.ExecutionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutionType |= ExecutionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			m.Operation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operation |= ExecutionTypeOperation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionBlocksFrequency", wireType)
			}
			m.ExecutionBlocksFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutionBlocksFrequency |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgModifyContractProposalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgModifyContractProposalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgModifyContractProposalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveContractProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveContractProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveContractProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositRefundAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositRefundAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveContractProposalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveContractProposalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveContractProposalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
