// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: emidev98/lifecycle_hooks/contract.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Contract defines the main object used in the module to store it's state.
type Contract struct {
	// Contract's execution type
	ExecutionType ExecutionType `protobuf:"varint,1,opt,name=execution_type,json=executionType,proto3,enum=emidev98.lifecycle_hooks.ExecutionType" json:"execution_type,omitempty"`
	// Execution frequency
	ExecutionFrequency int64 `protobuf:"varint,2,opt,name=execution_frequency,json=executionFrequency,proto3" json:"execution_frequency,omitempty"`
	// Latest block execution
	LatestBlockExecution int64 `protobuf:"varint,3,opt,name=latest_block_execution,json=latestBlockExecution,proto3" json:"latest_block_execution,omitempty"`
	// Amount of strikes that the contract has at the moment.
	Strikes int64 `protobuf:"varint,4,opt,name=strikes,proto3" json:"strikes,omitempty"`
	// Collateral deposited to the contract.
	Deposit github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,5,opt,name=deposit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"deposit"`
}

func (m *Contract) Reset()         { *m = Contract{} }
func (m *Contract) String() string { return proto.CompactTextString(m) }
func (*Contract) ProtoMessage()    {}
func (*Contract) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7042f85f483882, []int{0}
}
func (m *Contract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Contract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Contract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Contract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Contract.Merge(m, src)
}
func (m *Contract) XXX_Size() int {
	return m.Size()
}
func (m *Contract) XXX_DiscardUnknown() {
	xxx_messageInfo_Contract.DiscardUnknown(m)
}

var xxx_messageInfo_Contract proto.InternalMessageInfo

func (m *Contract) GetExecutionType() ExecutionType {
	if m != nil {
		return m.ExecutionType
	}
	return ExecutionType_BEGIN_BLOCK
}

func (m *Contract) GetExecutionFrequency() int64 {
	if m != nil {
		return m.ExecutionFrequency
	}
	return 0
}

func (m *Contract) GetLatestBlockExecution() int64 {
	if m != nil {
		return m.LatestBlockExecution
	}
	return 0
}

func (m *Contract) GetStrikes() int64 {
	if m != nil {
		return m.Strikes
	}
	return 0
}

// GenesisContract is the genesis state of the module, including the relation
// between the contract address and the contract state itself.
type GenesisContract struct {
	ContractAddress string   `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Contract        Contract `protobuf:"bytes,2,opt,name=contract,proto3" json:"contract"`
}

func (m *GenesisContract) Reset()         { *m = GenesisContract{} }
func (m *GenesisContract) String() string { return proto.CompactTextString(m) }
func (*GenesisContract) ProtoMessage()    {}
func (*GenesisContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7042f85f483882, []int{1}
}
func (m *GenesisContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisContract.Merge(m, src)
}
func (m *GenesisContract) XXX_Size() int {
	return m.Size()
}
func (m *GenesisContract) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisContract.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisContract proto.InternalMessageInfo

func (m *GenesisContract) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *GenesisContract) GetContract() Contract {
	if m != nil {
		return m.Contract
	}
	return Contract{}
}

func init() {
	proto.RegisterType((*Contract)(nil), "emidev98.lifecycle_hooks.Contract")
	proto.RegisterType((*GenesisContract)(nil), "emidev98.lifecycle_hooks.GenesisContract")
}

func init() {
	proto.RegisterFile("emidev98/lifecycle_hooks/contract.proto", fileDescriptor_7b7042f85f483882)
}

var fileDescriptor_7b7042f85f483882 = []byte{
	// 441 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xbd, 0x6e, 0xdb, 0x30,
	0x14, 0x85, 0xcd, 0x24, 0x6d, 0x5c, 0x06, 0x4d, 0x0a, 0x36, 0x28, 0x94, 0x0c, 0xb2, 0xe1, 0xc5,
	0xee, 0x60, 0x12, 0x71, 0x3b, 0xf4, 0x67, 0xaa, 0xd3, 0x9f, 0xad, 0x83, 0xd0, 0x2e, 0x5d, 0x04,
	0x89, 0xba, 0x71, 0x08, 0xcb, 0xa2, 0x2a, 0xd2, 0x41, 0xf4, 0x06, 0x1d, 0x3a, 0xf4, 0x11, 0xf2,
	0x38, 0x01, 0xba, 0x64, 0x2c, 0x3a, 0x04, 0x85, 0xbd, 0xf4, 0x31, 0x0a, 0x91, 0xa2, 0x92, 0xc6,
	0xf0, 0x24, 0xdd, 0x7b, 0xce, 0x25, 0x0f, 0x3f, 0x5c, 0xdc, 0x87, 0x99, 0x48, 0xe0, 0xec, 0xe5,
	0x0b, 0x96, 0x8a, 0x13, 0xe0, 0x25, 0x4f, 0x21, 0x3c, 0x95, 0x72, 0xaa, 0x18, 0x97, 0x99, 0x2e,
	0x22, 0xae, 0x69, 0x5e, 0x48, 0x2d, 0x89, 0xe7, 0x8c, 0xf4, 0x8e, 0xf1, 0x70, 0x7f, 0x22, 0x27,
	0xd2, 0x98, 0x58, 0xf5, 0x67, 0xfd, 0x87, 0x07, 0x5c, 0xaa, 0x99, 0x54, 0xa1, 0x15, 0x6c, 0x51,
	0x4b, 0xbe, 0xad, 0x58, 0x1c, 0x29, 0x60, 0x67, 0x47, 0x31, 0xe8, 0xe8, 0x88, 0x71, 0x29, 0xb2,
	0x5a, 0x1f, 0xae, 0xcd, 0x04, 0xe7, 0xc0, 0xe7, 0x5a, 0xc8, 0x2c, 0xd4, 0x65, 0x0e, 0xd6, 0xde,
	0xfb, 0xb9, 0x81, 0xdb, 0xc7, 0x75, 0x58, 0xf2, 0x11, 0xef, 0xfe, 0x6f, 0xf2, 0x50, 0x17, 0x0d,
	0x76, 0x47, 0x7d, 0xba, 0x2e, 0x3f, 0x7d, 0xe7, 0xfc, 0x9f, 0xca, 0x1c, 0x82, 0x87, 0x70, 0xbb,
	0x24, 0x0c, 0x3f, 0xbe, 0x39, 0xef, 0xa4, 0x80, 0xaf, 0x73, 0xc8, 0x78, 0xe9, 0x6d, 0x74, 0xd1,
	0x60, 0x33, 0x20, 0x8d, 0xf4, 0xde, 0x29, 0xe4, 0x39, 0x7e, 0x92, 0x46, 0x1a, 0x94, 0x0e, 0xe3,
	0x54, 0xf2, 0x69, 0xd8, 0x58, 0xbc, 0x4d, 0x33, 0xb3, 0x6f, 0xd5, 0x71, 0x25, 0x36, 0x37, 0x13,
	0x0f, 0x6f, 0x2b, 0x5d, 0x88, 0x29, 0x28, 0x6f, 0xcb, 0xd8, 0x5c, 0x49, 0x12, 0xbc, 0x9d, 0x40,
	0x2e, 0x95, 0xd0, 0xde, 0xbd, 0x2e, 0x1a, 0xec, 0x8c, 0x0e, 0x68, 0x0d, 0xb3, 0xc2, 0x47, 0x6b,
	0x7c, 0xf4, 0x58, 0x8a, 0x6c, 0xcc, 0x2e, 0xaf, 0x3b, 0xad, 0xdf, 0xd7, 0x9d, 0xfe, 0x44, 0xe8,
	0xd3, 0x79, 0x4c, 0xb9, 0x9c, 0xd5, 0xe4, 0xeb, 0xcf, 0x50, 0x25, 0x53, 0x56, 0x51, 0x51, 0x66,
	0x20, 0x70, 0x47, 0xbf, 0x6a, 0x7f, 0xbb, 0xe8, 0xa0, 0xbf, 0x17, 0x1d, 0xd4, 0xfb, 0x8e, 0xf0,
	0xde, 0x07, 0xc8, 0x40, 0x09, 0xd5, 0x40, 0x7d, 0x8a, 0x1f, 0xb9, 0x6d, 0x08, 0xa3, 0x24, 0x29,
	0x40, 0x29, 0x83, 0xf5, 0x41, 0xb0, 0xe7, 0xfa, 0x6f, 0x6c, 0x9b, 0xbc, 0xc5, 0x6d, 0xd7, 0x32,
	0x90, 0x76, 0x46, 0xbd, 0xf5, 0xe4, 0xdd, 0x05, 0xe3, 0xad, 0x2a, 0x78, 0xd0, 0x4c, 0xde, 0xc4,
	0x19, 0x7f, 0xbe, 0x5c, 0xf8, 0xe8, 0x6a, 0xe1, 0xa3, 0x3f, 0x0b, 0x1f, 0xfd, 0x58, 0xfa, 0xad,
	0xab, 0xa5, 0xdf, 0xfa, 0xb5, 0xf4, 0x5b, 0x5f, 0x5e, 0xdf, 0x7a, 0xe4, 0xea, 0xc2, 0x0c, 0xed,
	0xc2, 0x9c, 0xaf, 0x74, 0xcc, 0xeb, 0xe3, 0xfb, 0x66, 0x75, 0x9e, 0xfd, 0x0b, 0x00, 0x00, 0xff,
	0xff, 0xe9, 0x7d, 0xfa, 0xd7, 0xff, 0x02, 0x00, 0x00,
}

func (this *Contract) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Contract)
	if !ok {
		that2, ok := that.(Contract)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ExecutionType != that1.ExecutionType {
		return false
	}
	if this.ExecutionFrequency != that1.ExecutionFrequency {
		return false
	}
	if this.LatestBlockExecution != that1.LatestBlockExecution {
		return false
	}
	if this.Strikes != that1.Strikes {
		return false
	}
	if !this.Deposit.Equal(that1.Deposit) {
		return false
	}
	return true
}
func (this *GenesisContract) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GenesisContract)
	if !ok {
		that2, ok := that.(GenesisContract)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ContractAddress != that1.ContractAddress {
		return false
	}
	if !this.Contract.Equal(&that1.Contract) {
		return false
	}
	return true
}
func (m *Contract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Contract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Contract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Deposit.Size()
		i -= size
		if _, err := m.Deposit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintContract(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.Strikes != 0 {
		i = encodeVarintContract(dAtA, i, uint64(m.Strikes))
		i--
		dAtA[i] = 0x20
	}
	if m.LatestBlockExecution != 0 {
		i = encodeVarintContract(dAtA, i, uint64(m.LatestBlockExecution))
		i--
		dAtA[i] = 0x18
	}
	if m.ExecutionFrequency != 0 {
		i = encodeVarintContract(dAtA, i, uint64(m.ExecutionFrequency))
		i--
		dAtA[i] = 0x10
	}
	if m.ExecutionType != 0 {
		i = encodeVarintContract(dAtA, i, uint64(m.ExecutionType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GenesisContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Contract.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintContract(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintContract(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintContract(dAtA []byte, offset int, v uint64) int {
	offset -= sovContract(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Contract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExecutionType != 0 {
		n += 1 + sovContract(uint64(m.ExecutionType))
	}
	if m.ExecutionFrequency != 0 {
		n += 1 + sovContract(uint64(m.ExecutionFrequency))
	}
	if m.LatestBlockExecution != 0 {
		n += 1 + sovContract(uint64(m.LatestBlockExecution))
	}
	if m.Strikes != 0 {
		n += 1 + sovContract(uint64(m.Strikes))
	}
	l = m.Deposit.Size()
	n += 1 + l + sovContract(uint64(l))
	return n
}

func (m *GenesisContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	l = m.Contract.Size()
	n += 1 + l + sovContract(uint64(l))
	return n
}

func sovContract(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozContract(x uint64) (n int) {
	return sovContract(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Contract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContract
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Contract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Contract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionType", wireType)
			}
			m.ExecutionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutionType |= ExecutionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionFrequency", wireType)
			}
			m.ExecutionFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutionFrequency |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestBlockExecution", wireType)
			}
			m.LatestBlockExecution = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestBlockExecution |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strikes", wireType)
			}
			m.Strikes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Strikes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Deposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContract(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContract
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContract
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Contract.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContract(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContract
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipContract(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowContract
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContract
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContract
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthContract
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupContract
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthContract
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthContract        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowContract          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupContract = fmt.Errorf("proto: unexpected end of group")
)
